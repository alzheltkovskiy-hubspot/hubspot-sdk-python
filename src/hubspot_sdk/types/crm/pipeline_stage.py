# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from typing import Dict, Optional
from datetime import datetime
from typing_extensions import Literal

from pydantic import Field as FieldInfo

from ..._models import BaseModel

__all__ = ["PipelineStage"]


class PipelineStage(BaseModel):
    id: str
    """
    A unique identifier generated by HubSpot that can be used to retrieve and update
    the pipeline stage.
    """

    archived: bool
    """Whether the pipeline is archived."""

    created_at: datetime = FieldInfo(alias="createdAt")
    """The date the pipeline stage was created.

    The stages on default pipelines will have createdAt = 0.
    """

    display_order: int = FieldInfo(alias="displayOrder")
    """The order for displaying this pipeline stage.

    If two pipeline stages have a matching `displayOrder`, they will be sorted
    alphabetically by label.
    """

    label: str
    """A label used to organize pipeline stages in HubSpot's UI.

    Each pipeline stage's label must be unique within that pipeline.
    """

    updated_at: datetime = FieldInfo(alias="updatedAt")
    """The date the pipeline stage was last updated."""

    archived_at: Optional[datetime] = FieldInfo(alias="archivedAt", default=None)
    """The date the pipeline was archived.

    `archivedAt` will only be present if the pipeline is archived.
    """

    metadata: Optional[Dict[str, str]] = None
    """
    A JSON object containing properties that are not present on all object
    pipelines.

    For `deals` pipelines, the `probability` field is required
    (`{ "probability": 0.5 }`), and represents the likelihood a deal will close.
    Possible values are between 0.0 and 1.0 in increments of 0.1.

    For `tickets` pipelines, the `ticketState` field is optional
    (`{ "ticketState": "OPEN" }`), and represents whether the ticket remains open or
    has been closed by a member of your Support team. Possible values are `OPEN` or
    `CLOSED`.
    """

    write_permissions: Optional[Literal["CRM_PERMISSIONS_ENFORCEMENT", "READ_ONLY", "INTERNAL_ONLY"]] = FieldInfo(
        alias="writePermissions", default=None
    )
